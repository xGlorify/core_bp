from core import db, bcrypt
from datetime import datetime

class Motor(db.Model):
    #Define Motor table name.
    __tablename__ = 'Motor'
    #Define Motor table variables. Asset tag is primary_key.
    asset_tag = db.Column('Asset Tag', db.String(100), unique=True, primary_key = True, nullable = False)
    horsepower = db.Column('Horsepower', db.Integer, nullable = False)
    voltage = db.Column('Voltage', db.Integer, nullable = False)
    rpm = db.Column('RPM', db.Integer, nullable = False)
    frame = db.Column('Frame', db.String(30), nullable = False)
    enclosure = db.Column('Enclosure', db.String(30), nullable = False)
    secondary_voltage = db.Column('Secondary Voltage', db.Numeric)
    attachments = db.Column('Attachments', db.String(30))
    pub_date = db.Column(db.DateTime())
    
    
    
    def __init__(self, asset_tag, horsepower, voltage, rpm, frame, enclosure, secondary_voltage, attachments, pub_date=None):
        self.asset_tag = asset_tag
        self.horsepower = horsepower
        self.voltage = voltage
        self.rpm = rpm
        self.frame = frame
        self.enclosure = enclosure
        self.secondary_voltage = secondary_voltage
        self.attachments = attachments
        self.pub_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
class User(db.Model):

    __tablename__ = "users"

    id = db.Column(db.Integer, primary_key=True)
    first_name = db.Column(db.String, nullable=False)
    last_name = db.Column(db.String, nullable=False)
    email = db.Column(db.String, nullable=False)
    title = db.Column(db.String, nullable=False)
    password = db.Column(db.String)

    def __init__(self, first_name, last_name, email, title, password):
        self.first_name = first_name
        self.last_name = last_name
        self.email = email
        self.title = title
        self.password = bcrypt.generate_password_hash(password)
    
    def is_authenticated(self):
        return True

    def is_active(self):
        return True

    def is_anonymous(self):
        return False

    def get_id(self):
        return unicode(self.id)
        
#class Users(db.Model):
#    
#    __tablename__ = 'Users'
#    
#    id = db.Column(db.Integer, primary_key = True)
#    first_name = db.Column('First_name', db.String(100))
#    last_name = db.Column('Last_name', db.String(100))
#    password = db.Column('Password', db.String(100))
#    user_email = db.Column('Email', db.String(75))
#    
#    def __init__(self, first_name, last_name, password, user_email):
#        self.first_name = first_name
#        self.last_name = last_name
#        self.password = bcrypt.generate_password_hash(password)
#        self.user_email = user_email